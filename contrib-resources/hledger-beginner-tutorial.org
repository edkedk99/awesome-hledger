* Hledger Beginner Tutorial

; Welcome to hledger, This file is where your financial history will be recorded. This is a valid journal file, but it has a /.org/ extensions for better formatting. It is suggested to use /.journal/ extension in your future files.

; Since this is a plain text file, it is easy to edit and manipulate, and you can use search and replace functionality in your text editor. There are many tools that helps to add transactions without editing this file, but it is advisable to learn the format and later go to awesome-hledger repository for some great tool!

** Installation

; There are multiple ways to install /hledger/. The easiest one is to just download the executable available at https://github.com/simonmichael/hledger/releases, give it execution permission and run from the command-line. Go to [[https://hledger.org/install.htm]] for other methods. 

** Comments

; This file is a valid journal file. You execute commands on it.
; Everything after '#', ';' or '*' are comments, so they are not read by hledger, except tags to be discussed later.

** Some directives

*** Currency

; To start configuring our journal, it is a good idea to define a default currency. Multiple currencies can be used and converted between them but this is out of scope of this tutorial.

#+BEGIN_SRC ledger
; Format: D [Currency] [amountFormat]
D USD 1,000.00  
#+END_SRC

*** Accounts

; Declaring accounts is optional, but it is recommended to declare them using directives, or at least the main ones, as we are going to do now. Note the order they appear in the journal is the one that will appear in reports.

; Beside the name, we can declare the type according to accounting standards:

; A=Asset, L=Liabilities, R=Revenues, X=Expenses, E=Equity

#+BEGIN_SRC ledger
; Attention! Here and in some other places you may need at least 2 spaces, instead of 1 
account Asset		; type:A                   
account Liabilities	; type:L
account Revenue		; type:R
account Expenses	; type:X
account Equity		; type:E
#+END_SRC

; Let's declare some other accounts, so they will appear in the desired order

; You can organize them in a tree structure using ':' to indicate a parent-child relation account

#+BEGIN_SRC ledger
account Asset:Cash
account Asset:Investments
account Asset:Real Estate
account Liabilities:Credit Card
account Liabilities:Mortgage
#+END_SRC

; Possibly you will not start from scratch. You will want to import your data from a previous software that you want to adapt for the powerful hierachical account system hledger provides. For that we will use alias so that whenever hledger sees an old account, it will substitute for its new name. 

#+BEGIN_SRC
alias jpm=Asset:Bank:JP Morgan Chase                     ; Format - alias OLD=NEW
alias visa=Liabilities:Credit Card:Visa Platinum         ; Substitute 'visa' for 'Liabilities:Credit Card:Visa Platinum'
#+END_SRC

** Initial Balance

; Now we will finally start adding transactions to our ledger. For that, you will need to understand the format. Don't worry if it seems complicated. You will quickly be used to it, and hledger offers some great tools to make that process easier with an interactive filling app with auto-complete and tools to automatically import data from your bank or any other source. It may even automatically fill the data for you if it finds a similar older transaction!

; A transaction is a financial event that has multiple posting showing where the money came and where it goes to. The main property of a transaction is that it always needs to balance, or in other words, it values should sum 0. This property is called 'double-entry accounting'. It may seem hard to use, but hledger uses some ingenious approach that makes it almost as simple as a regular 'single-entry-accounting' that you may be used to do.

#+BEGIN_SRC ledger
; Our first transaction will be the initial balances each account has one day before we effectively register transaction.
; A good practice is to have one file for each year. Let's do it for 2023, so the date will be 31st, December 2022.
2022-12-31 Inicial Balance                               ; Format - date description. Date format - YYYY/MM/DD
    Asset:Cash                                   300     ; <-- This is a posting: Format -   account  amount
    ; Attention! You need to indent postings with at least 2 spaces.
    ;            It is needed at least 2 spaces between the account and the amount
    Asset:Bank:JP Morgan Chase                  4800.81  ; <-- After a ';' it is comment. It needs 2 spaces from the amount
    Asset:Bank:Weels Fargo                      2400.23  ; <-- more posting. A transaction can have mutiple postings!
    Asset:Online Account:Apple Pay               120.34  ; <-- You don't need to declare accounts before using
    Asset:Online Account:PayPal                   83,24  ; 
    Equity:Initial Balance                               ; Why the amount is empty? See below
#+END_SRC

; Remember that them sum of the transaction postings should equal 0 (zero). That is aparentely not case, but in fact it is. We did an "implicit posting". Hledger considers a posting with empty amount to be the value needed, so the transaction equals zero. In the case above, the implicit amount for "Equity:Initial Balance" is -7704.62. I could have made this amount explicit if I wanted, but if I do a mistake, hledger will complain, that's why it may be a good idea to let him to the sum for us.

** First Transactions

; Finnaly we are going to add some real transactions. Take a look at the comments because they will introduce you to more great features that will help you to control your finances like never before.

#+BEGIN_SRC ledger
; The description is split by a '|' symbol. 
; What comes to the left is the payee and to the right is a note (transaction explanation)
; This feature is optional, we will use it only when we have the payee information easely available or when we think it is important
2023-01-03 Uncle Mario | New Year's Eve celebration drinks and snacks      ; Spliting what is the payee and the notes will help us to better analyze our spending
    Asset:Bank:Weels Fargo                   -125.00                     
    Expenses:Leisure:Events                                                ; Remember that positive 125.00 is implicit here

; We can add before the payee between parethesis a code that indentify the transaction. In this case it is the check number
2023-01-10 (365727) Wallace Real Estate Corp | Monthly rental payment check  ; Add the code only if you find this information relevant. Usually it is not
    Asset:Bank:JP Morgan                     -1850.00 USD  ; I don't need to inform the default currency explicitely. This is just to let you know we can.
    Expenses:Housing:Rental

2023-01-15 Acme Group | Salary
    Asset:Bank:JP Morgan                        7200
    Revenue:Salary                             -7200  ; This time I recorded an explicit amount, even if I didn't have to. Let's discuss how a Revenue can be negative
#+END_SRC

; As we discussed before, transactions must ALWAYS sum 0. Since the Revenue increased my balance at the bank, the other posting needs to be negative to balance the transaction.

; This indeed sound strange, and it will be the most difficult concept to grasp if you are not used to double-entry accounting. In fact, most of the time you will not need to worry about that because you will make use of implicit posting amount discussed in previous examples but anyway it is important to understand. By the other hand, Expenses are positive, the opposite of what we may expect because it will decrease the balance in our Asset Account. So don't worry when you see Revenue as negative in your reports, that's the expected behavior.

; Now it is your turn. Create 2 expenses and think about what is the best account other than the bank with implicit amount that help you to organize you finances.

#+BEGIN_SRC ledger
; Your transaction goes after this line.



#+END_SRC

; After you are done, go to the terminal, in the folder where this file is saved and enter the following command:

; $ hledger -f hledger-beginner-tutorial.org stats

; If you don't get an error, congratulations, you did your first transactions correctly!!!

** Credit card transactions

#+BEGIN_SRC ledger
; The next transaction are expenses paid using a credit card. Note that the amount doesn't leave you account immediately. You will pay the bank later in the month, so it is an amount you OWE to the bank, in other words, a Liability.
2023-01-16 Wesley Pub  ; I don't need either the code nor the payee
    Liabilities:Credit Card:Visa Platinum       -150  ; I could have use only 'visa' as the account name because hledger would recognize as an alias defined above, but I preferred not. It is like a "substitute" for the Cash account it was a debit card.
    Expenses:Leisure:Events                           ; Remember Expenses are positive, the opposite of Liabilities

2023-01-17 Calvin Klein
    Expenses:Products:Clothing                    80
    Liabilities:Credit Card:Visa Platinum             ; It doesn't matter the posting order nor which of them is implicit

2023-01-20 Visa | Invoice                             ; Paying the credit card invoice
    Asset:Bank:JP Morgan                         -230 ; Payment decrease my bank balance
    Liabilities:Credit Card:Visa Platinum             ; This account will go to zero after this payment, meaning I don't owe anything anymore to the bank 
#+END_SRC

** First commands

; Now we will start to see how hledger can help us to get a picture of our financial life by running some commands. The most import options is the name of the file to read. It can be set with /--filename/ or reading from *LEDGER_FILE* environment variable.

; To make the commands smaller, set the journal file with /export LEDGER_FILE=<path/to/this/file>/. If want this to persist when you reopen the terminal, save this line to your /.bashrc/ file.

; $ hledger print --explicit

; $ hledger register "Bank:"

; $ hledger register ":Credit Card"

; $ hledger balance  <-- Sum is zero, our accounting is balanced!

; $ hledger balancesheetequity && hledger incomestatement  # See that the increase in assets is justified by the same amount in our profit as shown by the incomestatement

; $ hledger balance "Expenses:" --weekly --tree

; $ hledger balance "Expenses:" --weekly --depth 2 --transpose

; $ hledger balance "Bank:" --weekly --row-total --tree

; $ hledger balance "Bank:" --weekly --row-total --historical --tree

; $ hledger balance "Expenses:" --pivot payee

; Now run the balance, balancesheetequity and incomestatement reports with /--tree/. Now you get a tree based output, with sums of each parent account.

** Status

#+BEGIN_SRC ledger
; In february, we will learn some more advanced concepts. See comments on each transaction.
2023-02-03 ! (0345MX4) Peter's Plumbing | Fixed leaking in the bathroom  ; The '!' symbol means this transaction is pending. I didn't see it in the bank statement yet
    Asset:Bank:Wells Fargo                       110                     ; Hledger also offers '*' symbol in the place of '!', meaning the transaction is cleared
    Expenses:Housing:Maintenance
#+END_SRC

** Transactions and postings tag

#+BEGIN_SRC ledger
; In the next transactions, we will use the comment to add some information that will not be discarded and used in a great feature called 'tags'
2023-02-05 Uber | Driving Revenue    ; ride:Uber,  -> Tag Format - key:value, key:value, ...
    Asset:Bank:Wells Fargo                       180
    Revenue:Riding App

2023-02-06 Lyft | Driving Revenue    ; ride:Lyft
    Asset:Bank:Wells Fargo                       120
    Revenue:Riding App

2023-02-07 Texaco | Gas Refill       ; ride:Expenses
    Asset:Online Account:Apple Pay             -78.37
    Expenses:Car:Gas
#+END_SRC

; Tags allows different ways to organize transaction, in the case above it is my secondary job as Riding app driver. Run the commands below to see the effects.

; Using tags gives you two main benefits. First is the possibility to filter only transactions that has a tag or that the tag has a specific value. For example: 

; $ hledger print tag:ride

; $ hledger print tag:ride=Uber

; $ hledger balance "Revenue:|Expenses:" tag:ride

; $ hledger balance "Revenue:|Expenses:" tag:ride=Lyft

; The other benefit is the /--pivot/ options. It lets you get many fields, including tags, instead  of the account, so your journal become a multi-dimensional categorization system where the account name is only one of them. To understand this concept, let's pivot by ride and get a balance for each ride tag's value.

; $ hledger balance "Revenue:|Expenses:" tag:ride --tree --pivot ride

** Front-end

; Hledger main usage is by generating reports using the command line, but sometimes it is nice to have other interfaces

*** hledger-ui

; hledger-ui is a terminal interface to navigate and filter transactions using the mouse and the keyboard. If the LEDGER_FILE environment variable is set, just run the command /hledger-ui/. See the help for more options

*** hledger-web

; Similar to /hledger-ui/ but it will start a web server and provide a link to navigate the transactions using a web browser. 

*** Charts

; Hledger doesn't provide charting capabilities out-of-the box, but there are extension you can find on /awesome-hledger/ repository to accomplish that.

** Next steps

; Although this tutorial is suficient to get an accounting and financial system more advanced then many closed and paid ERP around, we just scratched the surface on hledger potential. Go to [[https://www.hledger.org]] to learn many more features or [[https://github.com/edkedk99/awesome-hledger]] for a curated list of resources and compatible tools. To get an idea of additional capabilities, some concepts are listed here for additional learning:

#+BEGIN_SRC org
; - Querying and filtering transactions, 
; - All the balance command options
; - CSV import
; - Multiperiod/Multicolumn reports
; - Period expressions
; - Balance assertion
; - Multiple commodities and Market Prices
; - Forecasting and Budgeting
; - Automatic postings
#+END_SRC
